+-------------------------------------------------------------------------------------------------------+
                                            TECHNOLOGIES

1. Python
2. RapidApi
3. React
4. Heroku
5. Flask
6. Jinja
7. Node.js
8. Javascript

+-------------------------------------------------------------------------------------------------------+
                                            INSTRUCTIONS
                                    
Use this README to run this APP! Enjoy!

To use this repository, you must follow these steps:

1. Clone this repository by using git clone http://www.github.com/NJIT-CS490/project2-m1-<aka59>
1. Set this repository to your repository by using git remote set-url origin https://www.github.com/[your-username]/[your-repository]
2. Run the following in your terminal:
    # Set up React  
    2.1. Install your stuff!    
      a) `npm install`    
      b) `pip install flask-socketio`    
      c) `pip install eventlet`    
      d) `npm install -g webpack`    
      e) `npm install --save-dev webpack`    
      f) `npm install socket.io-client --save`    
    :warning: :warning: :warning: If you see any error messages, make sure you use `sudo pip` or `sudo npm`. If it says "pip cannot be found", run `which pip` and use `sudo [path to pip from which pip] install` :warning: :warning: :warning:    
    
    2.2 If you already have psql set up, **SKIP THE REST OF THE STEPS(2.3 - 2.4) AND JUST DO THE FOLLOWING COMMAND** --> Continue to 3:   
        `sudo service postgresql start`    
        Copy your `keys.env` file into your new directory.
    
    2.3 # Getting PSQL to work with Python 
        Update yum: `sudo yum update`, and enter yes to all prompts    
        Upgrade pip: `sudo /usr/local/bin/pip install --upgrade pip`  
        Get psycopg2: `sudo /usr/local/bin/pip install psycopg2-binary`    
        Get SQLAlchemy: `sudo /usr/local/bin/pip install Flask-SQLAlchemy==2.1`    
      
    2.4 # Setting up PSQL  
        Install PostGreSQL: `sudo yum install postgresql postgresql-server postgresql-devel postgresql-contrib postgresql-docs`    
            Enter yes to all prompts.    
        Initialize PSQL database: `sudo service postgresql initdb`    
        Start PSQL: `sudo service postgresql start`    
        Make a new superuser: `sudo -u postgres createuser --superuser $USER`    
            :warning: :warning: :warning: If you get an error saying "could not change directory", that's okay! It worked! :warning: :warning: :warning:    
        Make a new database: `sudo -u postgres createdb $USER`    
                :warning: :warning: :warning: If you get an error saying "could not change directory", that's okay! It worked! :warning: :warning: :warning:    
        Make sure your user shows up:    
            a) `psql`    
            b) `\du` look for ec2-user as a user    
            c) `\l` look for ec2-user as a database    
        Make a new user:    
            a) `psql` (if you already quit out of psql)    
            ## REPLACE THE [VALUES] IN THIS COMMAND! Type this with a new (short) unique password.   
            b) I recommend 4-5 characters - it doesn't have to be very secure. Remember this password!  
                `create user [some_username_here] superuser password '[some_unique_new_password_here]';`    
            c) `\q` to quit out of sql    
3. `cd` into your repository and make a new file called `keys.env` and add `SQL_USER=` and `SQL_PASSWORD=` in it  
    Fill in those values with the values you put in 7. b)  

4. Install flask using the same process as above ([sudo] pip[3] install flask)

5. Add your secret keys into key.env and populate it as follows:
   DATABASE_URL = "postgresql://{SQL_USER}:{SQL_PASSWORD}@localhost/postgres" {Fill in those variables with their respective values}
   DICT_KEY = '' {Sign up for Urban Dictionary at RapidAPI and subscribe } {https://rapidapi.com/community/api/urban-dictionary/details}
   JOKE_KEY=''   {Sign up for Dad Jokes at RapidAPI and subscribe } {https://rapidapi.com/KegenGuyll/api/dad-jokes/endpoints}
   
6. # Google OAuth
    6.1 #Setting up Google OAuth on Google
        a) Go to https://console.developers.google.com/ and sign up using your PERSONAL google account.
        b) Click "CREATE PROJECT" or in the dropdown menu called "Select a Project" in the top, click "NEW PROJECT".
        c) Make a new project and name it whatever you want. "No organization" is fine.
        d) Click "Credentials" in the left hand bar, then click "+ CREATE CREDENTIALS" and then click "OAuth client ID".
            # If you see a warning that says "To create an OAuth client ID, you must first set a product name on the consent screen", do the following steps:
            1. Click the "CONFIGURE CONSENT SCREEN" button.
            2. Choose "External"
            3. For "Application name," specify a suitable name.
            4. Press save.
            5. Go back to Credentials -> Create Credentials -> OAuth client ID. Click "web application".
            6. Change the App ID in scripts/GoogleButton.jsx
            
    6.2 #Setting up Google OAuth React
        a) Run the following: 'npm install react-google-login'
        b) Everything related to Google OAuth and React --> https://www.npmjs.com/package/react-google-login

6. Run the following commands to run the app locally:
   //MAKE SURE TO CD INTO THE DIRECTORY WHERE FILES ARE LOCATED
   run 'npm run watch'
   run 'python app.py'
   //A preview should be available on your localhost
   

7. (Heroku Procedure)Sign up for heroku at heroku.com 
        Install heroku by running npm install -g heroku
        Go through the following steps:
        heroku login -i
        heroku create
        
        #Pushing Database to Heroku
        7.1 Follow these commands
            a) heroku addons:create heroku-postgresql:hobby-dev
            b) heroku pg:wait
            c) PGUSER=<Postgres Username in keys.env> heroku pg:push postgres DATABASE_URL
                -> Enter Password when prompted
                -> It is ok if there's an exit with an error of 1
        
        #Check whether database in Heroku psql
        7.2 Follow these commands
            a) heroku pg:psql
            b) select * from <table name>;
            
    
        #Adding Keys
        7.3 Navigate to your newly-created heroku site!
            a)Add your secret keys (from keys.env) by going to https://dashboard.heroku.com/apps
              and clicking into your app. Click on Settings, then scroll to "Config Vars." Click
              "Reveal Config Vars" and add the key value pairs for each variable in app.py
              
            b)Your config var key names should be:
              DATABASE_URL = "postgresql://{SQL_USER}:{SQL_PASSWORD}@localhost/postgres" //Fill in those variables with their respective values
              DICT_KEY = '' {Sign up for Urban Dictionary at RapidAPI and subscribe } {https://rapidapi.com/community/api/urban-dictionary/details}
              JOKE_KEY=''   {Sign up for Dad Jokes at RapidAPI and subscribe } {https://rapidapi.com/KegenGuyll/api/dad-jokes/endpoints}
    
        #Setting up Procfile
        7.4 Configure requirements.txt with all requirements needed to run your app. [pip freeze > requirements.txt]
        7.5 Configure Procfile with the command needed to run your app. ["web: python foodtweets.py"]
   
    
8. (GIT Procedure) Go through the following steps:
        git status
        git add requirements.txt
        git add Procfile
        git status [Check whether all files have been staged]
        git commit -m "["Include meaningful message here"]"
        git push origin master
        git push heroku master
            a) If there is a build failure, enter the following code
            --> heroku plugins:install heroku-builds
            --> heroku builds:cancel -a <Your app name (fancy-name-####)>
            --> Try git push heroku master again :)
9. Go to your Heroku URL and Voila!
10. If you are still having issues, you may use heroku logs --tail to see what's wrong.

+-------------------------------------------------------------------------------------------------------+
                                            PAST ISSUES
                                    
1. The first technical issue that I came across is finding out how to even operate these functional React Hooks.
   I overcame this issue by going to the documentation to find out what the specs were for using React Hooks. Once I found
   that out I made sure to place all of my hooks at the top and not in functions.

2. The second technical issue that I came across occured when trying to output the respective messages and actually have them 
   display in sync one. While using SocketIO and React, I overcame this issue by creating a new channel in which I would use to see the
   chats 
 
3. Another issue that I am currently having is deploying my app to Heroku. I got an error along the lines of "something is wrong with the buildpack.
   I solved this issue by referring back to the lecture to find out that I had to kill the current build and restart it again.
   
4. The second issue that I had with Heroku was that the CONFIG VARS that I inputted in Heroku was not the same as the ones in the code.
   As a result Heroku kept crashing. By looking into the log I was able to find out where the error was occuring. Once I changed my VARS
   everything was dandy.
  
5. For some reason I just started getting blank pages while reloading. If the page does not load there is a possibility that there is a React issue.
   I made sure to look at the console and actually read the errors that I was receiving. 

6. I had issues referencing the pictures that I put in my static folder. I was able to solve this by making sure that when I reference pictures 
   I make sure they are referenced from where they are located exactly.

7. I had some issues when trying to use the Dad Jokes API and the terminolgy. I fixed this issue by making sure that once I had 
   the api link, I then just added the question mark along with the "api key =" in order to get the endpiont working.
   
8. I had issues using the google OAuth because I was getting a 400 Error. I then realized that the Flask app was actually using port 8080 to render
   the html files. So in order to account for that I had to add the ':8080' after the given url in order to make sure I'm referencing the correct url
   and port
   
   
   

+-------------------------------------------------------------------------------------------------------+
                                            CURRENT ISSUES    
                                            
1. An issue that I still have is trying to have the CSS border the "<li>" tags the way I want it to. I've been looking
   into different documentation that might help me achieve what I'm looking for. I want the borders to rotate around the edges
   of the li tags so I've been watching many videos regarding that. 

2. The second issue that I came across that I'm still trying to figure out is how to have the <li> tags appear on the right side of the current user
   and have the left side display the users that aren't the current one. 

3. Another issue that I'm having is seamlessly having the app take in differenet login buttons in order to allow the sign in.
   
+-------------------------------------------------------------------------------------------------------+
                                        FURTHER IMPROVEMENTS
                                        
1. Some further improvements that I would've liked to accomplish on this project is to have cleaner looking code. I felt like there were
   some ways that I could've cleaned up the code.

2. Another improvement that I would've liked to get on is making sure that users were able to actually search on their own profiles and histories
  
3. I would also like to have the user be able to add friends as they wish and private message them in their own chats. 

4. I want to also add the functionality of having live previews of links as well. Images were easier than the links. I'm still looking into how I can do that 
   for the links
   